from CoreUtils.Debug import Debug_Print
import CoreUtils.HTTPRequest
import CoreUtils.PortScanAPI
import CoreUtils.DomainAPI
import CoreUtils.DNSAPI
from tqdm import tqdm
from Configuration.Configuration import APP_CONFIGURATION
from CoreUtils.DNSAPI import Get_A_Record, Get_CName_Record
from CoreUtils.GeventPoolAPI import GeventPool


class SubDomainScanner:
    def __init__(self, domain):
        self.sub_domain_dict = {}
        self.domain = domain
        subdomain_list = [domain.split("\n")[0] for domain in open(APP_CONFIGURATION["SubdomainFile"]).readlines()]
        self.brute_subdomain_list = list(set([subdomain + "." + domain for subdomain in subdomain_list]))
        self.pool = GeventPool(self.brute_subdomain, self.brute_subdomain_list)
        try:
            self.subdomains = CoreUtils.DomainAPI.Get_SubDomain(self.domain, APP_CONFIGURATION["VirustotalToken"])
        except Exception as exception:
            Debug_Print(exception)
            self.subdomains = []

    def brute_subdomain(self, hostname, count, lock):
        try:
            cnames = Get_CName_Record(hostname)
            if cnames:
                self.subdomains(hostname)
        except Exception as exception:
            Debug_Print(exception)
            try:
                ipaddresses = Get_A_Record(hostname)
                if ipaddresses:
                    self.subdomains(hostname)
            except Exception as exception:
                Debug_Print(exception)
        while True:
            if not lock.locked():
                lock.acquire()
                count -= 1
                lock.release()
                break
            else:
                continue

    def get_sub_domain_info(self):
        try:
            self.pool.run()
            self.subdomains = tqdm(self.subdomains)
            for subdomain in self.subdomains:
                self.sub_domain_dict[subdomain] = {}
                try:
                    for cname in CoreUtils.DNSAPI.Get_CName_Record(subdomain):
                        self.sub_domain_dict[subdomain][cname] = {}
                        for ip in CoreUtils.DNSAPI.Get_A_Record(cname):
                            if CoreUtils.PortScanAPI.Ping(ip):
                                self.sub_domain_dict[subdomain][cname][ip] = {"webpage": []}
                                try:
                                    if CoreUtils.PortScanAPI.Port_Tcp_Scan(ip, 80):
                                        title = CoreUtils.HTTPRequest.Http_Title_Scan(ip, 80)
                                        self.sub_domain_dict[subdomain][cname][ip]["webpage"].append((80, title))
                                        tqdm.write("\033[1;32m[Hit] %s %s %s %s '80' %s" %(self.domain, subdomain, cname, ip, title))
                                    if CoreUtils.PortScanAPI.Port_Tcp_Scan(ip, 443):
                                        title = CoreUtils.HTTPRequest.Http_Title_Scan(ip, 443)
                                        tqdm.write("\033[1;32m[Hit] %s %s %s %s '443' %s" %(self.domain, subdomain, cname, ip, title))
                                except Exception as exception:
                                    Debug_Print("\033[1;31m[-] Unknown Failed, Reason:%s" % str(exception))
                                if len(self.sub_domain_dict[subdomain][cname][ip]["webpage"]) == 0:
                                    tqdm.write("\033[1;32m[Hit] %s %s %s %s 'OPEN'" % (self.domain, subdomain, cname, ip))
                            else:
                                tqdm.write("\033[1;32m[Hit] %s %s %s %s 'CLOSE'" % (self.domain, subdomain, cname, ip))
                        if len(self.sub_domain_dict[subdomain][cname].keys()) == 0:
                            tqdm.write("\033[1;32m[Hit] %s %s %s" % (self.domain, subdomain, cname))
                    if len(self.sub_domain_dict[subdomain].keys()) == 0:
                        tqdm.write("\033[1;32m[Hit] %s %s" % (self.domain, subdomain))
                except Exception as exception:
                    Debug_Print("\033[1;31m[-] Unknown Failed, Reason:%s" % str(exception))
                    continue
                self.subdomains.set_description("\033[1;32m[*]Subdomain Scanning: %s" % str(subdomain))
        except Exception as exception:
            Debug_Print("\033[1;31m[-] Unknown Failed, Reason:%s" % str(exception))



