# Base Class For Vulnerable Scanning Engine
import uuid
import threading
from tqdm import tqdm
from Configuration.Configuration import APP_CONFIGURATION


class ScanningThreadPool:
    def __init__(self, maxsize):
        self.maxsize = maxsize
        self.thread_dict = {}

    def thread_function(self, execute, name):
        def function(*args):
            execute(*args)
            del self.thread_dict[name]
        return function

    def start_new_thread(self, function, args):
        while True:
            if len(self.thread_dict.keys()) < self.maxsize:
                name = uuid.uuid1()
                self.thread_dict[name] = threading.Thread(target=self.thread_function(function, name), args=(args))
                self.thread_dict[name].start()
                self.thread_dict[name].join()
                break
            else:
                continue

    def show_size(self):
        print(self.maxsize)

    def show_status(self):
        for key in self.thread_dict.keys():
            print("Thread: " + self.thread_dict[key] + " : " + self.thread_dict[key].is_alive())


class VulnerableScannerBaseClass:
    def __init__(self, target):
        self.target = target  # target = "target://ip:port:protocol"
        if self.target.find(",") >= 0:
            self.target = self.target.split(",")
            for item in self.target:
                if item == "":
                    self.target.remove(item)
        if isinstance(self.target, str):
            self.target = [self.target]
        self.thread_pool = ScanningThreadPool(APP_CONFIGURATION["ThreadCount"])
        self.username_list = [username.split("\n")[0] for username in
                              open(APP_CONFIGURATION["UsernameFile"], "r").readlines()]
        self.password_list = [password.split("\n")[0] for password in
                              open(APP_CONFIGURATION["PasswordFile"], "r").readlines()]
        self.size = len(self.target)
        self.percent = tqdm
        self.header = APP_CONFIGURATION["Header"]

    def target_tuple(self):
        _list = []
        for target in self.target:
            content = target.split("://")[1]
            ipaddress, port, protocol = content.split(":")
            _list.append({"ipaddress": ipaddress, "port": int(port), "protocol": protocol})
        self.size = len(_list)
        return _list


def ScannerRegister(name, clazz):
    APP_CONFIGURATION["VulnerableDictionary"][name] = clazz
