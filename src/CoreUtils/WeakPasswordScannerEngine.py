from tqdm import tqdm
from threading import Thread
from Configuration.Configuration import APP_CONFIGURATION


class ScanningThreadPool:
    def __init__(self, function):
        self.size = APP_CONFIGURATION["ThreadCount"]
        self.function = function
        self.count = 0
        self.thread_dict = {}
        self.percent = tqdm

    def thread_function(self, execute, name):
        def function(*args):
            execute(*args)
            del self.thread_dict[name]
        return function

    def start_new_thread(self, function, args):
        while True:
            if len(self.thread_dict.keys()) < self.size:
                name = "Thread%s" % str(self.count)
                self.count += 1
                self.thread_dict[name] = Thread(target=self.thread_function(function, name), args=(args))
                self.thread_dict[name].start()
                self.thread_dict[name].join()
                break
            else:
                continue


class WeakPasswordScanningEngine:
    def __init__(self, targets):
        self.username_file = APP_CONFIGURATION["UsernameFile"]
        self.password_file = APP_CONFIGURATION["PasswordFile"]
        self.thread_pool = ScanningThreadPool(APP_CONFIGURATION["ThreadCount"])
        targets = targets.split(",")
        self.target = [(target.split("://")[1].split(":")) for target in targets]
        self.percent = tqdm


def ScannerRegister(name, clazz):
    APP_CONFIGURATION["WeakPasswordDictionary"][name] = clazz