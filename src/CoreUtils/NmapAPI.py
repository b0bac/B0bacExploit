import nmap
import threading
from tqdm import tqdm
from CoreUtils.Debug import Debug_Print
from Configuration.Configuration import APP_CONFIGURATION


class Nmapper:
    def __init__(self):
        self.scanner = nmap.PortScanner()
        self.count = 0
        self.flag = 0

    def _quick_scan(self, target, port):
        try:
            self.scanner.scan(hosts=target, ports=str(port), arguments="-sS", sudo=True, timeout=5)
        except Exception as exception:
            Debug_Print("\033[1;31m[-] Scan Failed: %s!"%str(exception))
            self.count -= 1
            return

        protocol = self.scanner[target].all_protocols()[0]
        state = None
        try:
            state = self.scanner[target][protocol][port]["state"]
        except Exception as exception:
            self.count -= 1
            return
        service = self.scanner[target][protocol][port]["name"]
        tqdm.write("\033[1;32m[Hit] %s %s %s %s"%(str(target), str(port), str(service), str(state)))
        self.count -= 1

    def _full_scan(self, target, port):
        try:
            self.scanner.scan(hosts=target, ports=str(port), arguments="-sV", sudo=True, timeout=10)
        except Exception as exception:
            Debug_Print("\033[1;31m[-] Scan Failed: %s!"%str(exception))
            self.count -= 1
            return
        protocol = self.scanner[target].all_protocols()[0]
        state = None
        try:
            state = self.scanner[target][protocol][port]["state"]
        except Exception as exception:
            self.count -= 1
            return
        service = self.scanner[target][protocol][port]["name"]
        product = self.scanner[target][protocol][port]["product"] if state == "open" else ""
        version = self.scanner[target][protocol][port]["version"] if state == "open" else ""
        tqdm.write("\033[1;32m[Hit] %s %s %s %s %s %s"%(str(target), str(port), str(service), str(state), str(product), str(version)))
        self.count -= 1

    def Scan(self, target, port, scantype):
        function = None
        portlist = []
        if scantype == "quick":
            function = self._quick_scan
        elif scantype == "full":
            function = self._full_scan
        else:
            tqdm.write("\033[1;31m[-]What ScanType You Want Choose? ")
            return
        if port == "common":
            portlist = APP_CONFIGURATION["EnterprisePorts"]
        elif port == "all":
            portlist = [x+1 for x in range(65535)]
        elif port == "key":
            portlist = APP_CONFIGURATION["KeyPorts"]
        else:
            try:
                portlist = [int(x) for x in port.split(",")]
            except Exception as exception:
                tqdm.write("\033[1;31m[-]Please Input Port Correctly: %s"%str(exception))
                return
        self.flag = len(portlist)
        if function is not None and len(portlist) > 0:
            portlist = tqdm(portlist)
            for port in portlist:
                while True:
                    if self.count < APP_CONFIGURATION["ThreadCount"]:
                        thread = threading.Thread(target=function, args=([target, port]))
                        thread.start()
                        self.flag -= 1
                        self.count += 1
                        if self.flag <= 10 or int(port) == 6379:
                            thread.join()
                        break
                    else:
                        pass
                portlist.set_description("Processing")
        return