import time
import github
from tqdm import tqdm
from CoreUtils.Debug import Debug_Print
from CoreUtils.GithHubAPI import Login, Search_Code
from Configuration.Configuration import APP_CONFIGURATION


class GitHubGather:
    def __init__(self):
        self.scanner = None
        self.percent = None

    def login(self):
        self.scanner = Login(APP_CONFIGURATION["GitHubToken"])

    def search(self, domain, keyword):
        size = 0
        results = None
        if self.scanner is not None:
            results = Search_Code(self.scanner, domain, keyword)
            while True:
                try:
                    size = results.totalCount
                    Debug_Print("\033[1;32m[+] We Got %s stuffs!"%str(size))
                    break
                except Exception as exception:
                    if isinstance(exception, github.RateLimitExceededException):
                        Debug_Print("\033[1;31m[-] Too Fast, We Need Wait For 1 min")
                        time.sleep(60)
                        continue
                    else:
                        Debug_Print("\033[1;31m[-] Unknown Failed, Reason:%s" % str(exception))
                        return
        index = 0
        if size > 0 and results is not None:
            self.percent = tqdm(results)
            for result in self.percent:
                try:
                    tqdm.write("\033[1;32m[Hit] : " + result.html_url + "【%s, %s】" % (domain, keyword))
                    index += 1
                    time.sleep(2)
                except Exception as exception:
                    if isinstance(exception, github.RateLimitExceededException):
                        Debug_Print("\033[1;31m[-] Too Fast, We Need Wait For 1 min")
                        index += 1
                        time.sleep(60)
                        continue
                    else:
                        Debug_Print("\033[1;3m[-] Unknown Failed, Reason:%s" % str(exception))
                        index += 1
                        continue
                self.percent.set_description("Processing[%s/%s]"%(str(index), str(size)))


