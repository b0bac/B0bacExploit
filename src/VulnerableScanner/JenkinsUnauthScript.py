from CoreUtils.VulnerableScanningEngine import VulnerableScannerBaseClass, ScannerRegister
from Configuration.Configuration import APP_CONFIGURATION

class JenkinsUnauthScriptScanner(VulnerableScannerBaseClass):
    def __init__(self, target):
        super().__init__(target)
        self.target_to_scan = self.target_tuple()

    def scan(self):
        if self.size == 1:
            target = self.target_to_scan[0]
            self.single_scan(target["ipaddress"], target["port"], target["protocol"])
        elif self.size > 1:
            self.multi_scan()

    def single_scan(self, ipaddress, port, protocol):
        import requests
        url = "%s://%s:%s/script" % (str(protocol), str(ipaddress), str(port))
        try:
            response = requests.get(url, headers=self.header, verify=False)
        except Exception as exception:
            self.percent.write("\033[1;32m[+] 主机【%s】%s端口 不存在Jenkins未授权执行命令漏洞!" % (ipaddress, str(port)))
            return
        if response.status_code == 200:
            self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在Jenkins未授权执行命令漏洞!"%(ipaddress, str(port)))
        else:
            self.percent.write("\033[1;32m[+] 主机【%s】%s端口 不存在Jenkins未授权执行命令漏洞!"%(ipaddress, str(port)))

    def multi_scan(self):
        self.percent = self.percent(total=len(self.target_to_scan))
        for target in self.target_to_scan:
            ipaddress = target["ipaddress"]
            port = target["port"]
            self.thread_pool.start_new_thread(self.single_scan, [ipaddress, port])
            self.percent.update(1)

ScannerRegister("JenkinsUnauthScript", JenkinsUnauthScriptScanner)