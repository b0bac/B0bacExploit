from CoreUtils.VulnerableScanningEngine import VulnerableScannerBaseClass, ScannerRegister


class RedisUnauthScanner(VulnerableScannerBaseClass):
    def __init__(self, target):
        super().__init__(target)
        self.target_to_scan = self.target_tuple()

    def scan(self):
        if self.size == 1:
            target = self.target_to_scan[0]
            self.single_scan(target[0], target[1])
        elif self.size > 1:
            self.multi_scan()

    def single_scan(self, ipaddress, port):
        import socket
        socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.settimeout(5)
        try:
            socket.connect((ipaddress, int(port)))
        except Exception as exception:
            self.percent.write("\033[1;32m[+] 主机【%s】%s端口 不存在Redis未授权访问漏洞!" % (ipaddress, str(port)))
            socket.close()
            return
        socket.send(b"INFO\r\n")
        receive_data = socket.recv(1024)
        if b"redis_version" in receive_data:
            self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在Redis未授权访问漏洞!"%(ipaddress, str(port)))
            socket.close()
        else:
            self.percent.write("\033[1;32m[+] 主机【%s】%s端口 不存在Redis未授权访问漏洞!"%(ipaddress, str(port)))
            socket.close()

    def multi_scan(self):
        self.percent = self.percent(self.target_to_scan)
        for target in self.percent:
            ipaddress = target[0]
            port = target[1]
            self.thread_pool.start_new_thread(self.single_scan, [ipaddress, port])
            self.percent.set_description("Scanning")


ScannerRegister("RedisUnauth", RedisUnauthScanner)



