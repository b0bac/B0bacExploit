from CoreUtils.WeakPasswordScannerEngine import WeakPasswordScanningEngine, ScannerRegister


class RedisPasswordScanner(WeakPasswordScanningEngine):
    def __init__(self, target):
        super().__init__(target)
        self.password_list = [password for password in open(self.password_file, 'r').readlines()]

    def redis_login(self, ipaddress, port, password):
        import socket
        socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.settimeout(5)
        try:
            socket.connect((ipaddress, int(port)))
        except Exception as exception:
            socket.close()
            return
        socket.send(b"INFO\r\n")
        receive_data = socket.recv(1024)
        if b"Authentication" in receive_data:
            socket.send("AUTH %s\r\n" % password)
            receive_data = socket.recv(1024)
            if b"+OK" in receive_data:
                self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在Redis弱口令! %s" % (ipaddress, str(port), password))
            socket.close()
        else:
            socket.close()

    def scan(self):
        argments = []
        for target in self.target:
            for password in self.password_list:
                argments.append([target[0], int(target[1]), password.split("\n")[0]])
        self.percent = self.percent(argments)
        for item in self.percent:
            self.thread_pool.start_new_thread(self.redis_login, item)
        self.percent.set_description("Scanning")


ScannerRegister("RedisBrute", RedisPasswordScanner)



