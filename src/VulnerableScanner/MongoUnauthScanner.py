import binascii

from CoreUtils.VulnerableScanningEngine import VulnerableScannerBaseClass, ScannerRegister


class RedisUnauthScanner(VulnerableScannerBaseClass):
    def __init__(self, target):
        super().__init__(target)
        self.target_to_scan = self.target_tuple()

    def scan(self):
        if self.size == 1:
            target = self.target_to_scan[0]
            self.single_scan(target[0], target[1])
        elif self.size > 1:
            self.multi_scan()

    def single_scan(self, ipaddress, port):
        import socket
        socket_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket_client.settimeout(5)
        try:
            socket_client.connect((ipaddress, int(port)))
            data = binascii.a2b_hex(
                "3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000")
            socket_client.send(data)
            receive_data1 = socket_client.recv(1024)
            if b"ismaster" in receive_data1:
                getlog_data = binascii.a2b_hex(
                    "480000000200000000000000d40700000000000061646d696e2e24636d6400000000000100000021000000026765744c6f670010000000737461727475705761726e696e67730000")
                socket_client.send(getlog_data)
                receive_data2 = socket_client.recv(1024)
                if b"totalLinesWritten" in receive_data2:
                    self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在MongoDB未授权访问!" % (ipaddress, str(port)))
        except Exception as exception:
            self.percent.write("\033[1;32m[+] 主机【%s】%s端口 不存在MongoDB未授权访问漏洞!" % (ipaddress, str(port)))
            socket_client.close()
            return

    def multi_scan(self):
        self.percent = self.percent(self.target_to_scan)
        for target in self.percent:
            ipaddress = target[0]
            port = target[1]
            self.thread_pool.start_new_thread(self.single_scan, [ipaddress, port])
            self.percent.set_description("Scanning")


ScannerRegister("RedisUnauth", RedisUnauthScanner)



