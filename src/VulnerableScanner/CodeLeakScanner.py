from CoreUtils.VulnerableScanningEngine import VulnerableScannerBaseClass, ScannerRegister


class CodeLeakScanner(VulnerableScannerBaseClass):
    def __init__(self, target):
        super().__init__(target)
        self.target_to_scan = self.target_tuple()

    def scan(self):
        if self.size == 1:
            target = self.target_to_scan[0]
            self.single_scan(target[0], target[1], target[2])
        elif self.size > 1:
            self.multi_scan()

    def single_scan(self, ipaddress, port, protocol):
        import requests
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        base_url = "%s://%s:%s"%(str(protocol), str(ipaddress), str(port))
        git_url = base_url + "/.git/config"
        svn_url = base_url + "/.svn/entries"
        try:
            response = requests.get(git_url)
            if response.status_code == 200:
                self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在GIT泄露漏洞!" % (ipaddress, str(port)))
        except Exception as exception:
            pass
        try:
            response = requests.get(svn_url)
            if response.status_code == 200:
                self.percent.write("\033[1;31m[+] 主机【%s】%s端口 存在SVN泄露漏洞!" % (ipaddress, str(port)))
        except Exception as exception:
            pass

    def multi_scan(self):
        self.percent = self.percent(self.target_to_scan)
        for target in self.percent:
            ipaddress = target[0]
            port = target[1]
            protocol = target[2]
            self.thread_pool.start_new_thread(self.single_scan, [ipaddress, port, protocol])
            self.percent.set_description("Scanning")


ScannerRegister("CodeLeak", CodeLeakScanner)



